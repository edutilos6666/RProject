print(sort(numbers, decreasing=TRUE))
names <- c("edu", "foo", "bar", "pako")
print(sort(names))
print(sort(names, decreasing=TRUE))
numbers <- list(10, 20, 30)
print(numbers)
print(names(numbers))
complex_list <- list(c(10, 20, 30), matrix(c(1, 2, 3, 4, "foo", "bar"), nrow= 2), list("red", "green", "blue"))
names(complex_list) <- c("vector", "matrix", "inner list")
print(complex_list)
print(names(complex_list))
print(numbers[2])
print(names[1])
l1 <- list(10, 20, 30)
l2 <- list(40, 50, 60)
merged <- c(l1, l2)
cat("merged = ", sprintf("%s", merged), "\n")
v1 <- unlist(l1)
v2 <- unlist(v2)
v_merged = c(v1, v2)
cat("v_merged = ", v_merged, "\n")
print(matrix(c(3:14), nrow=4, byrow= TRUE))
print(matrix(c(3:14), nrow=4, byrow=FALSE))
rownames = c("row 1", "row 2", "row 3", "row 4")
colnames = c("col 1", "col 2", "col 3")
print(matrix(c(3:14), nrow=4, byrow=TRUE, dimnames= list(rownames, colnames)))
m = matrix(c(1:10), nrow=5)
print(m)
print(m[4,2])
print(m[,2])
print(m[4,])
m2 = matrix(c(10:20), nrow= 5)
print(m2)
print(m + m2)
print(m - m2)
myString = "Hello, World!"
print(myString)
id <- 1
name <- "foobar"
age <- 10
wage <- 100.0
active <- TRUE
print(sprintf("id = %d", id))
print(sprintf("name = %s", name))
print(sprintf("age = %d", age))
print(sprintf("wage = %.2f", wage))
print(sprintf("active = %s", active))
# vector
names <- c("foo", "bar", "bim")
print(names)
l1 <- list(c("foo", "bar"), 10 , 100.0)
print(l1)
M = matrix(c(1, 2, 3, 4, 5,6), nrow= 3, ncol= 2, byrow = TRUE)
print(M)
arr = array(c("foo", "bar"), dim = c(3, 2, 3))
print(arr)
colors = c("red", "green", "yellow", "red", "yellow", "red", "green")
factor_colors <- factor(colors)
print(colors)
print(factor_colors)
people <- data.frame(
id = c(1, 2, 3),
name = c("foo", "bar", "bim"),
age = c(10, 20, 30),
wage = c(100.0, 200.0, 300.0),
active = c(TRUE, FALSE, TRUE)
)
print(people)
cat("id = ", id, "\nname = ", name, "\nage = ", age)
print(ls())
v1 <- c(10, 20, 30)
v2 <- c(100, 200, 300)
print(v1+v2)
print(v1-v2)
print(v1*v2)
print(v1/v2)
print(v1%%v2)
print(v1%/%v2)
print(v1^v2)
print(v1<v2)
print(v1<=v2)
print(v1>v2)
print(v1>=v2)
print(v1==v2)
print(v1!=v2)
print(v1&v2)
print(v1|v2)
print(!v1)
print(v1&&v2)
print(v1||v2)
print(2:8)
print(10 %in% v1)
print(101 %in% v1)
print(M)
print(t(M))
print(M %*% t(M))
age = 10
if(age > 0 && age < 10) {
cat("you are a kid.")
} else if(age >= 10 && age < 20) {
cat("you are a teenager.")
} else if(age >= 20 && age < 50) {
cat("you are an adult.")
} else {
cat("you are an elderly.")
}
res <- switch(3, "red", "green", "blue", "yellow")
print(res)
letters <- LETTERS[1:10]
for(l in letters) {
print(l)
}
i <- 0
while(i < 10 ) {
cat("step = ", i, "\n")
i = i + 1
}
i <- 0
repeat {
i <- i + 1
if(i == 5) next
cat("step = ", i , "\n")
if (i == 10) break
}
findMax <- function(x, y) {
if(x > y) return(x)
else return(y)
}
findMin <- function(x, y) {
if(x < y) return(x)
else return(y)
}
x <- 10
y <- 3
max <- findMax(x, y)
min <- findMin(x, y)
cat("max = ", max, "\n")
cat("min = ", min , "\n")
a <- "foo"
b <- "bar"
c <- "bim"
print(paste(a, b , c))
print(paste(a, b,c, sep= " - "))
print(paste(a,b,c, sep= ""))
print(paste(a,b,c, sep="", collapse=""))
print(toupper(a))
print(tolower(toupper(a)))
print(substring(a, 1, 2))
print(1:10)
print(class(1:10))
print(seq(1, 10, by = 2))
print(c("foo", 10, 100.0))
v = c(10, 20, 30, 40)
print(v[c(2)])
print(v[c(1,2,3)])
numbers <- c(100, 80, 60, 40, 20, 10)
print(sort(numbers))
print(sort(numbers, decreasing=TRUE))
names <- c("edu", "foo", "bar", "pako")
print(sort(names))
print(sort(names, decreasing=TRUE))
numbers <- list(10, 20, 30)
print(numbers)
print(names(numbers))
complex_list <- list(c(10, 20, 30), matrix(c(1, 2, 3, 4, "foo", "bar"), nrow= 2), list("red", "green", "blue"))
names(complex_list) <- c("vector", "matrix", "inner list")
print(complex_list)
print(names(complex_list))
print(numbers[2])
print(names[1])
l1 <- list(10, 20, 30)
l2 <- list(40, 50, 60)
merged <- c(l1, l2)
cat("merged = ", sprintf("%s", merged), "\n")
v1 <- unlist(l1)
v2 <- unlist(v2)
v_merged = c(v1, v2)
cat("v_merged = ", v_merged, "\n")
print(matrix(c(3:14), nrow=4, byrow= TRUE))
print(matrix(c(3:14), nrow=4, byrow=FALSE))
rownames = c("row 1", "row 2", "row 3", "row 4")
colnames = c("col 1", "col 2", "col 3")
print(matrix(c(3:14), nrow=4, byrow=TRUE, dimnames= list(rownames, colnames)))
m = matrix(c(1:10), nrow=5)
print(m)
print(m[4,2])
print(m[,2])
print(m[4,])
m2 = matrix(c(10:19), nrow= 5)
print(m2)
print(m + m2)
print(m - m2)
myString = "Hello, World!"
print(myString)
id <- 1
name <- "foobar"
age <- 10
wage <- 100.0
active <- TRUE
print(sprintf("id = %d", id))
print(sprintf("name = %s", name))
print(sprintf("age = %d", age))
print(sprintf("wage = %.2f", wage))
print(sprintf("active = %s", active))
# vector
names <- c("foo", "bar", "bim")
print(names)
l1 <- list(c("foo", "bar"), 10 , 100.0)
print(l1)
M = matrix(c(1, 2, 3, 4, 5,6), nrow= 3, ncol= 2, byrow = TRUE)
print(M)
arr = array(c("foo", "bar"), dim = c(3, 2, 3))
print(arr)
colors = c("red", "green", "yellow", "red", "yellow", "red", "green")
factor_colors <- factor(colors)
print(colors)
print(factor_colors)
people <- data.frame(
id = c(1, 2, 3),
name = c("foo", "bar", "bim"),
age = c(10, 20, 30),
wage = c(100.0, 200.0, 300.0),
active = c(TRUE, FALSE, TRUE)
)
print(people)
cat("id = ", id, "\nname = ", name, "\nage = ", age)
print(ls())
v1 <- c(10, 20, 30)
v2 <- c(100, 200, 300)
print(v1+v2)
print(v1-v2)
print(v1*v2)
print(v1/v2)
print(v1%%v2)
print(v1%/%v2)
print(v1^v2)
print(v1<v2)
print(v1<=v2)
print(v1>v2)
print(v1>=v2)
print(v1==v2)
print(v1!=v2)
print(v1&v2)
print(v1|v2)
print(!v1)
print(v1&&v2)
print(v1||v2)
print(2:8)
print(10 %in% v1)
print(101 %in% v1)
print(M)
print(t(M))
print(M %*% t(M))
age = 10
if(age > 0 && age < 10) {
cat("you are a kid.")
} else if(age >= 10 && age < 20) {
cat("you are a teenager.")
} else if(age >= 20 && age < 50) {
cat("you are an adult.")
} else {
cat("you are an elderly.")
}
res <- switch(3, "red", "green", "blue", "yellow")
print(res)
letters <- LETTERS[1:10]
for(l in letters) {
print(l)
}
i <- 0
while(i < 10 ) {
cat("step = ", i, "\n")
i = i + 1
}
i <- 0
repeat {
i <- i + 1
if(i == 5) next
cat("step = ", i , "\n")
if (i == 10) break
}
findMax <- function(x, y) {
if(x > y) return(x)
else return(y)
}
findMin <- function(x, y) {
if(x < y) return(x)
else return(y)
}
x <- 10
y <- 3
max <- findMax(x, y)
min <- findMin(x, y)
cat("max = ", max, "\n")
cat("min = ", min , "\n")
a <- "foo"
b <- "bar"
c <- "bim"
print(paste(a, b , c))
print(paste(a, b,c, sep= " - "))
print(paste(a,b,c, sep= ""))
print(paste(a,b,c, sep="", collapse=""))
print(toupper(a))
print(tolower(toupper(a)))
print(substring(a, 1, 2))
print(1:10)
print(class(1:10))
print(seq(1, 10, by = 2))
print(c("foo", 10, 100.0))
v = c(10, 20, 30, 40)
print(v[c(2)])
print(v[c(1,2,3)])
numbers <- c(100, 80, 60, 40, 20, 10)
print(sort(numbers))
print(sort(numbers, decreasing=TRUE))
names <- c("edu", "foo", "bar", "pako")
print(sort(names))
print(sort(names, decreasing=TRUE))
numbers <- list(10, 20, 30)
print(numbers)
print(names(numbers))
complex_list <- list(c(10, 20, 30), matrix(c(1, 2, 3, 4, "foo", "bar"), nrow= 2), list("red", "green", "blue"))
names(complex_list) <- c("vector", "matrix", "inner list")
print(complex_list)
print(names(complex_list))
print(numbers[2])
print(names[1])
l1 <- list(10, 20, 30)
l2 <- list(40, 50, 60)
merged <- c(l1, l2)
cat("merged = ", sprintf("%s", merged), "\n")
v1 <- unlist(l1)
v2 <- unlist(v2)
v_merged = c(v1, v2)
cat("v_merged = ", v_merged, "\n")
print(matrix(c(3:14), nrow=4, byrow= TRUE))
print(matrix(c(3:14), nrow=4, byrow=FALSE))
rownames = c("row 1", "row 2", "row 3", "row 4")
colnames = c("col 1", "col 2", "col 3")
print(matrix(c(3:14), nrow=4, byrow=TRUE, dimnames= list(rownames, colnames)))
m = matrix(c(1:10), nrow=5)
print(m)
print(m[4,2])
print(m[,2])
print(m[4,])
m2 = matrix(c(10:19), nrow= 5)
print(m2)
print(m + m2)
print(m - m2)
m1 = matrix(c(1:10), nrow= 5)
m2 = t(m1)
print(m1*m2)
myString = "Hello, World!"
print(myString)
id <- 1
name <- "foobar"
age <- 10
wage <- 100.0
active <- TRUE
print(sprintf("id = %d", id))
print(sprintf("name = %s", name))
print(sprintf("age = %d", age))
print(sprintf("wage = %.2f", wage))
print(sprintf("active = %s", active))
# vector
names <- c("foo", "bar", "bim")
print(names)
l1 <- list(c("foo", "bar"), 10 , 100.0)
print(l1)
M = matrix(c(1, 2, 3, 4, 5,6), nrow= 3, ncol= 2, byrow = TRUE)
print(M)
arr = array(c("foo", "bar"), dim = c(3, 2, 3))
print(arr)
colors = c("red", "green", "yellow", "red", "yellow", "red", "green")
factor_colors <- factor(colors)
print(colors)
print(factor_colors)
people <- data.frame(
id = c(1, 2, 3),
name = c("foo", "bar", "bim"),
age = c(10, 20, 30),
wage = c(100.0, 200.0, 300.0),
active = c(TRUE, FALSE, TRUE)
)
print(people)
cat("id = ", id, "\nname = ", name, "\nage = ", age)
print(ls())
v1 <- c(10, 20, 30)
v2 <- c(100, 200, 300)
print(v1+v2)
print(v1-v2)
print(v1*v2)
print(v1/v2)
print(v1%%v2)
print(v1%/%v2)
print(v1^v2)
print(v1<v2)
print(v1<=v2)
print(v1>v2)
print(v1>=v2)
print(v1==v2)
print(v1!=v2)
print(v1&v2)
print(v1|v2)
print(!v1)
print(v1&&v2)
print(v1||v2)
print(2:8)
print(10 %in% v1)
print(101 %in% v1)
print(M)
print(t(M))
print(M %*% t(M))
age = 10
if(age > 0 && age < 10) {
cat("you are a kid.")
} else if(age >= 10 && age < 20) {
cat("you are a teenager.")
} else if(age >= 20 && age < 50) {
cat("you are an adult.")
} else {
cat("you are an elderly.")
}
res <- switch(3, "red", "green", "blue", "yellow")
print(res)
letters <- LETTERS[1:10]
for(l in letters) {
print(l)
}
i <- 0
while(i < 10 ) {
cat("step = ", i, "\n")
i = i + 1
}
i <- 0
repeat {
i <- i + 1
if(i == 5) next
cat("step = ", i , "\n")
if (i == 10) break
}
findMax <- function(x, y) {
if(x > y) return(x)
else return(y)
}
findMin <- function(x, y) {
if(x < y) return(x)
else return(y)
}
x <- 10
y <- 3
max <- findMax(x, y)
min <- findMin(x, y)
cat("max = ", max, "\n")
cat("min = ", min , "\n")
a <- "foo"
b <- "bar"
c <- "bim"
print(paste(a, b , c))
print(paste(a, b,c, sep= " - "))
print(paste(a,b,c, sep= ""))
print(paste(a,b,c, sep="", collapse=""))
print(toupper(a))
print(tolower(toupper(a)))
print(substring(a, 1, 2))
print(1:10)
print(class(1:10))
print(seq(1, 10, by = 2))
print(c("foo", 10, 100.0))
v = c(10, 20, 30, 40)
print(v[c(2)])
print(v[c(1,2,3)])
numbers <- c(100, 80, 60, 40, 20, 10)
print(sort(numbers))
print(sort(numbers, decreasing=TRUE))
names <- c("edu", "foo", "bar", "pako")
print(sort(names))
print(sort(names, decreasing=TRUE))
numbers <- list(10, 20, 30)
print(numbers)
print(names(numbers))
complex_list <- list(c(10, 20, 30), matrix(c(1, 2, 3, 4, "foo", "bar"), nrow= 2), list("red", "green", "blue"))
names(complex_list) <- c("vector", "matrix", "inner list")
print(complex_list)
print(names(complex_list))
print(numbers[2])
print(names[1])
l1 <- list(10, 20, 30)
l2 <- list(40, 50, 60)
merged <- c(l1, l2)
cat("merged = ", sprintf("%s", merged), "\n")
v1 <- unlist(l1)
v2 <- unlist(v2)
v_merged = c(v1, v2)
cat("v_merged = ", v_merged, "\n")
print(matrix(c(3:14), nrow=4, byrow= TRUE))
print(matrix(c(3:14), nrow=4, byrow=FALSE))
rownames = c("row 1", "row 2", "row 3", "row 4")
colnames = c("col 1", "col 2", "col 3")
print(matrix(c(3:14), nrow=4, byrow=TRUE, dimnames= list(rownames, colnames)))
m = matrix(c(1:10), nrow=5)
print(m)
print(m[4,2])
print(m[,2])
print(m[4,])
m2 = matrix(c(10:19), nrow= 5)
print(m2)
print(m + m2)
print(m - m2)
m1 = matrix(c(1:10), nrow= 5)
m2 = matrix(c(10:19), nrow=5)
print(m1*m2)
